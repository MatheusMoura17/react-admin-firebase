{"version":3,"file":"index.esm.mjs","sources":["../src/misc/arrayHelpers.ts","../src/misc/objectFlatten.ts","../src/misc/logger/logger-base.ts","../src/misc/logger/logger.ts","../src/misc/logger/firestore-logger.ts","../src/misc/dispatcher.ts","../src/misc/translate-from-firestore.ts","../src/misc/document-parser.ts","../src/misc/internal.models.ts","../src/misc/pathHelper.ts","../src/misc/translate-to-firestore.ts","../src/providers/database/firebase/FirebaseWrapper.ts","../src/misc/firebase-models.ts","../src/providers/database/ResourceManager.ts","../src/providers/database/FireClient.ts","../src/misc/storage-parser.ts","../src/misc/metadata-parser.ts","../src/providers/lazy-loading/queryCursors.ts","../src/providers/lazy-loading/paramsToQuery.ts","../src/providers/lazy-loading/FirebaseLazyLoadingClient.ts","../src/providers/DataProvider.ts","../src/misc/status-code-translator.ts","../src/providers/queries/GetList.ts","../src/providers/queries/GetOne.ts","../src/providers/queries/GetMany.ts","../src/providers/queries/GetManyReference.ts","../src/providers/commands/Update.ts","../src/providers/commands/UpdateMany.ts","../src/providers/commands/Create.ts","../src/providers/commands/Delete.ts","../src/providers/commands/Delete.Soft.ts","../src/providers/commands/DeleteMany.ts","../src/providers/commands/DeleteMany.Soft.ts","../src/providers/AuthProvider.ts"],"sourcesContent":["import { get, isEmpty } from 'lodash';\nimport { getFieldReferences, SearchObj } from './objectFlatten';\n\nexport function sortArray(\n  data: Array<{}>,\n  field: string,\n  dir: 'asc' | 'desc'\n): void {\n  data.sort((a: {}, b: {}) => {\n    const rawA = get(a, field);\n    const rawB = get(b, field);\n    const isAsc = dir === \"asc\";\n\n    const isNumberField = Number.isFinite(rawA) && Number.isFinite(rawB);\n    if (isNumberField) {\n      return basicSort(rawA, rawB, isAsc);\n    }\n    const isStringField = typeof rawA === 'string' && typeof rawB === 'string';\n    if (isStringField) {\n      const aParsed = rawA.toLowerCase();\n      const bParsed = rawB.toLowerCase();\n      return basicSort(aParsed, bParsed, isAsc);\n    }\n    const isDateField = rawA instanceof Date && rawB instanceof Date;\n    if (isDateField) {\n      return basicSort(rawA, rawB, isAsc);\n    }\n    return basicSort(!!rawA, !!rawB, isAsc);\n  });\n}\n\nfunction basicSort(aValue: any, bValue: any, isAsc: boolean) {\n  if (aValue > bValue) {\n    return isAsc ? 1 : -1;\n  }\n  if (aValue < bValue) {\n    return isAsc ? -1 : 1;\n  }\n  return 0;\n}\n\nexport function filterArray(\n  data: Array<{}>,\n  searchFields?: { [field: string]: string | number | boolean | null }\n): Array<{}> {\n  if (!searchFields || isEmpty(searchFields)) {\n    return data;\n  }\n  const searchObjs: SearchObj[] = [];\n  Object.keys(searchFields).map((fieldName) => {\n    const fieldValue = searchFields[fieldName];\n    const getSubObjects = getFieldReferences(fieldName, fieldValue);\n    searchObjs.push(...getSubObjects);\n  });\n  const filtered = data.filter((row) =>\n    searchObjs.reduce((acc, cur) => {\n      const res = doesRowMatch(row, cur.searchField, cur.searchValue);\n      return res && acc;\n    }, true as boolean)\n  );\n  return filtered;\n}\n\nexport function doesRowMatch(\n  row: {},\n  searchField: string,\n  searchValue: any\n): boolean {\n  const searchThis = get(row, searchField);\n  const bothAreFalsey = !searchThis && !searchValue;\n  if (bothAreFalsey) {\n    return true;\n  }\n  const nothingToSearch = !searchThis;\n  if (nothingToSearch) {\n    return false;\n  }\n  const isStringSearch = typeof searchValue === 'string';\n  if (isStringSearch) {\n    return searchThis\n      .toString()\n      .toLowerCase()\n      .includes(searchValue.toLowerCase());\n  }\n  const isBooleanOrNumber =\n    typeof searchValue === 'boolean' || typeof searchValue === 'number';\n  if (isBooleanOrNumber) {\n    return searchThis === searchValue;\n  }\n  const isArraySearch = Array.isArray(searchValue);\n  if (isArraySearch) {\n    return searchValue.includes(searchThis);\n  }\n  return false;\n}\n","type SearchValues = {} | number | string | boolean | null ;\ntype SearchValue = SearchValues | SearchValue[];\n\nexport interface SearchObj {\n  searchField: string;\n  searchValue: SearchValue;\n}\nexport function getFieldReferences(\n  fieldName: string,\n  value: {} | SearchValue\n): SearchObj[] {\n  const isFalsy = !value;\n  const isSimple = isFalsy ||\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean';\n\n  if (isSimple) {\n    return [\n      {\n        searchField: fieldName,\n        searchValue: value as SearchValue,\n      },\n    ];\n  }\n  const tree = {} as Record<string, SearchValue>;\n  tree[fieldName] = value;\n  return objectFlatten(tree);\n}\n\nexport function objectFlatten(tree: {}): SearchObj[] {\n  var leaves: SearchObj[] = [];\n  var recursivelyWalk = function (obj: any, path: string | null) {\n    path = path || \"\";\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        const objVal = obj && obj[key];\n        const currentPath = !!path ? path + \".\" + key : key;\n        const isWalkable =\n          typeof objVal === 'object' || objVal instanceof Array;\n        if (isWalkable) {\n          recursivelyWalk(objVal, currentPath);\n        } else {\n          leaves.push({ searchField: currentPath, searchValue: objVal });\n        }\n      }\n    }\n  };\n  recursivelyWalk(tree, null);\n  return leaves;\n}\n","type LogFn = (...args: any) => void;\n\nexport const LogNoOp: LogFn = (...args: any) => null;\n\nexport class LoggerBase {\n  constructor(private title: string, private cacheEnabledKey: string) {}\n\n  private isEnabled() {\n    return !!localStorage.getItem(this.cacheEnabledKey);\n  }\n\n  SetEnabled(isEnabled: boolean) {\n    if (isEnabled) {\n      localStorage.setItem(this.cacheEnabledKey, 'true');\n    } else {\n      localStorage.removeItem(this.cacheEnabledKey);\n    }\n  }\n\n  public get log() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.log.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n\n  public get warn() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.warn.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n\n  public get error() {\n    if (!this.isEnabled()) {\n      return LogNoOp;\n    }\n    const boundLogFn: (...args: any) => void = console.error.bind(\n      console,\n      this.title\n    );\n    return boundLogFn;\n  }\n}\n","import { LoggerBase } from './logger-base';\n\nconst LOGGER_ENABLEDKEY = 'LOGGING_ENABLED';\nexport const logger = new LoggerBase('ðŸ”¥raf:', LOGGER_ENABLEDKEY);\n\nexport const log = logger.log;\nexport const logError = logger.error;\nexport const logWarn = logger.warn;\n","import { RAFirebaseOptions } from 'providers/options';\nimport { LogNoOp, LoggerBase } from './logger-base';\n\nconst LOGGER_ENABLEDKEY = 'LOGGING_FIRESTORE_COSTS_ENABLED';\nconst logger = new LoggerBase('ðŸ’¸firestore-costs:', LOGGER_ENABLEDKEY);\n\nconst KEY_SINGLE = 'firecosts-single-reads';\n\nexport interface IFirestoreLogger {\n  logDocument: (count: number) => Function;\n  SetEnabled: (isEnabled: boolean) => void;\n  ResetCount: (shouldReset: boolean) => void;\n}\n\nexport function MakeFirestoreLogger(\n  options: RAFirebaseOptions\n): IFirestoreLogger {\n  function notEnabled() {\n    return !options?.lazyLoading?.enabled;\n  }\n\n  function incrementRead(incrementBy = 1) {\n    const currentCountRaw = localStorage.getItem(KEY_SINGLE) || '';\n    const currentCount = parseInt(currentCountRaw) || 0;\n    const incremented = currentCount + incrementBy;\n    localStorage.setItem(KEY_SINGLE, incremented + '');\n    return incremented;\n  }\n  function clearCache() {\n    localStorage.removeItem(KEY_SINGLE);\n  }\n  return {\n    SetEnabled(isEnabled: boolean) {\n      logger.SetEnabled(isEnabled);\n    },\n    ResetCount(shouldReset: boolean) {\n      shouldReset && clearCache()\n    },\n    logDocument(docCount: number) {\n      if (notEnabled()) {\n        return LogNoOp;\n      }\n      const count = incrementRead(docCount);\n      const suffix = `+${docCount} (session total=${count} documents read)`;\n      const boundLogFn: (...args: any) => void = logger.log.bind(\n        console,\n        suffix\n      );\n      return boundLogFn;\n    },\n  };\n}\n","import { log } from './logger';\n\nexport type DispatchEvent =\n\t'FILE_UPLOAD_WILL_START' |\n\t'FILE_UPLOAD_PROGRESS' |\n\t'FILE_UPLOAD_PAUSED' |\n\t'FILE_UPLOAD_RUNNING' |\n\t'FILE_UPLOAD_CANCELED' |\n\t'FILE_UPLOAD_COMPLETE' |\n\t'FILE_SAVED';\n\nexport function dispatch(\n\teventName: DispatchEvent,\n\tfileName: string,\n\tdata?: any,\n): void {\n\tconst eventMonitor = document.getElementById('eventMonitor');\n\tif (!eventMonitor) {\n\t\tlog(`eventMonitor not found to dispatch event ${eventName} for ${fileName}`);\n\t\treturn;\n\t}\n\tconst eventData = { fileName, data };\n\tlet event = new CustomEvent(eventName, { detail: eventData });\n\teventMonitor.dispatchEvent(event);\n};","import { set, has } from \"lodash\";\nimport { IFirebaseWrapper } from \"providers/database\";\nimport { REF_INDENTIFIER } from \"./internal.models\";\nimport { logError } from \"./logger\";\nimport { FireStoreDocumentRef } from \"./firebase-models\";\n\nexport interface RefDocFound {\n  fieldPath: string;\n  refDocPath: string;\n}\n\nexport interface FromFirestoreResult {\n  parsedDoc: any;\n  refdocs: RefDocFound[];\n}\n\nexport function translateDocFromFirestore(obj: any) {\n  const isObject = !!obj && typeof obj === \"object\";\n  const result: FromFirestoreResult = {\n    parsedDoc: {},\n    refdocs: [],\n  };\n  if (!isObject) {\n    return result;\n  }\n  Object.keys(obj).map((key) => {\n    const value = obj[key];\n    obj[key] = recusivelyCheckObjectValue(value, key, result);\n  });\n  result.parsedDoc = obj;\n  return result;\n}\n\nexport function recusivelyCheckObjectValue(\n  input: any,\n  fieldPath: string,\n  result: FromFirestoreResult\n): any {\n  const isFalsey = !input;\n  if (isFalsey) {\n    return input;\n  }\n  const isPrimitive = typeof input !== \"object\";\n  if (isPrimitive) {\n    return input;\n  }\n  const isTimestamp = !!input.toDate && typeof input.toDate === \"function\";\n  if (isTimestamp) {\n    return input.toDate();\n  }\n  const isArray = Array.isArray(input);\n  if (isArray) {\n    return (input as any[]).map((value, index) =>\n      recusivelyCheckObjectValue(value, `${fieldPath}.${index}`, result)\n    );\n  }\n  const isDocumentReference = isInputADocReference(input);\n  if (isDocumentReference) {\n    const ref = input as FireStoreDocumentRef;\n    result.refdocs.push({ fieldPath: fieldPath, refDocPath: ref.path });\n    return ref.id;\n  }\n  const isObject = typeof input === \"object\";\n  if (isObject) {\n    Object.keys(input).map((key) => {\n      const value = input[key];\n      input[key] = recusivelyCheckObjectValue(value, key, result);\n    });\n    return input;\n  }\n  return input;\n}\n\nfunction isInputADocReference(input: any): boolean {\n  const isDocumentReference = typeof input.id === \"string\" &&\n    typeof input.firestore === \"object\" &&\n    typeof input.parent === \"object\" &&\n    typeof input.path === \"string\";\n  return isDocumentReference;\n}\n\nexport function applyRefDocs(\n  doc: any,\n  refDocs: RefDocFound[],\n) {\n  refDocs.map((d) => {\n    set(doc, REF_INDENTIFIER + d.fieldPath, d.refDocPath);\n  });\n  return doc;\n}\n\nexport const recursivelyMapStorageUrls = async (\n  fireWrapper: IFirebaseWrapper,\n  fieldValue: any\n): Promise<any> => {\n  const isPrimitive = !fieldValue || typeof fieldValue !== 'object';\n  if (isPrimitive) {\n    return fieldValue\n  }\n  const isFileField = has(fieldValue, 'src');\n  if (isFileField) {\n    try {\n      const src = await fireWrapper\n        .storage()\n        .ref(fieldValue.src)\n        .getDownloadURL();\n      return {\n        ...fieldValue,\n        src,\n      };\n    } catch (error) {\n      logError(`Error when getting download URL`, {\n        error,\n      });\n      return fieldValue;\n    }\n  }\n  const isArray = Array.isArray(fieldValue);\n  if (isArray) {\n    return Promise.all(\n      (fieldValue as any[]).map(async (value, index) => {\n        fieldValue[index] = await recursivelyMapStorageUrls(fireWrapper, value);\n      })\n    );\n  }\n  const isDocumentReference = isInputADocReference(fieldValue);\n  if (isDocumentReference) {\n    return fieldValue;\n  }\n  const isObject = !isArray && typeof fieldValue === \"object\";\n  if (isObject) {\n    return Promise.all(\n      Object.keys(fieldValue).map(async (key) => {\n        const value = fieldValue[key];\n        fieldValue[key] = await recursivelyMapStorageUrls(fireWrapper, value);\n      })\n    ).then(() => fieldValue);\n  }\n};\n","import { FireStoreQueryDocumentSnapshot, FireStoreDocumentSnapshot } from \"./firebase-models\";\nimport { logWarn } from \"./logger\";\nimport { applyRefDocs, translateDocFromFirestore } from \"./translate-from-firestore\";\nimport * as ra from './react-admin-models';\n\nexport function parseFireStoreDocument<T extends ra.Record>(doc: FireStoreQueryDocumentSnapshot | FireStoreDocumentSnapshot | undefined): T {\n  if (!doc) {\n    logWarn('parseFireStoreDocument: no doc', { doc });\n    return {} as T;\n  }\n  const data = doc.data();\n  const result = translateDocFromFirestore(data);\n  const dataWithRefs = applyRefDocs(result.parsedDoc, result.refdocs);\n  // React Admin requires an id field on every document,\n  // So we can just using the firestore document id\n  return { id: doc.id, ...dataWithRefs } as T;\n}\n","export const REF_INDENTIFIER = \"___REF_FULLPATH_\";\n\nexport interface ParsedRefDoc {\n  ___refpath: string;\n  ___refid: string;\n}\n","import path from \"path-browserify\";\n\nexport function getAbsolutePath(\n  rootRef: undefined | string | (() => string),\n  relativePath: string | null\n): string {\n  if (!rootRef) {\n    return relativePath+'';\n  }\n  if (!relativePath) {\n    throw new Error(\n      \"Resource name must be a string of length greater than 0 characters\"\n    );\n  }\n  const rootRefValue = typeof rootRef === \"string\" ? rootRef : rootRef();\n  const withSlashes = path.join(\"/\", rootRefValue, \"/\", relativePath, \"/\");\n  const slashCount = withSlashes.split(\"/\").length - 1;\n  if (slashCount % 2) {\n    throw new Error(`The rootRef path must point to a \"document\"\n    not a \"collection\"e.g. /collection/document/ or\n    /collection/document/collection/document/`);\n  }\n  return withSlashes.slice(1, -1);\n}\n\nexport function joinPaths(...args: string[]) {\n  return path.join(...args);\n}\n","import { REF_INDENTIFIER } from \"./internal.models\";\n\ninterface ParsedUpload {\n  fieldDotsPath: string;\n  fieldSlashesPath: string;\n  rawFile: File | any;\n}\n\ninterface ParsedDocRef {\n  fieldDotsPath: string;\n  refPath: string;\n}\n\ninterface ParseResult {\n  parsedDoc: any;\n  uploads: ParsedUpload[];\n  refdocs: ParsedDocRef[];\n}\n\nexport function translateDocToFirestore(obj: any): ParseResult {\n  const isObject = !!obj && typeof obj === \"object\";\n  const result: ParseResult = {\n    uploads: [],\n    refdocs: [],\n    parsedDoc: {},\n  };\n  if (!isObject) {\n    return result;\n  }\n  Object.keys(obj).map((key) => {\n    const value = obj[key];\n    recusivelyParseObjectValue(value, key, result);\n  });\n  result.parsedDoc = obj;\n  return result;\n}\n\nexport function recusivelyParseObjectValue(\n  input: any,\n  fieldPath: string,\n  result: ParseResult\n): any {\n  const isFalsey = !input;\n  if (isFalsey) {\n    return input;\n  }\n  const isRefField =\n    typeof fieldPath === \"string\" && fieldPath.includes(REF_INDENTIFIER);\n  if (isRefField) {\n    const refDocFullPath = input as string;\n    result.refdocs.push({\n      fieldDotsPath: fieldPath,\n      refPath: refDocFullPath,\n    });\n    return;\n  }\n  const isPrimitive = typeof input !== \"object\";\n  if (isPrimitive) {\n    return input;\n  }\n  const isTimestamp = !!input.toDate && typeof input.toDate === \"function\";\n  if (isTimestamp) {\n    return input.toDate();\n  }\n  const isArray = Array.isArray(input);\n  if (isArray) {\n    return (input as []).map((value, index) =>\n      recusivelyParseObjectValue(value, `${fieldPath}.${index}`, result)\n    );\n  }\n  const isFileField = !!input && input.hasOwnProperty(\"rawFile\");\n  if (isFileField) {\n    result.uploads.push({\n      fieldDotsPath: fieldPath,\n      fieldSlashesPath: fieldPath.split(\".\").join(\"/\"),\n      rawFile: input.rawFile,\n    });\n    delete input.rawFile;\n    return;\n  }\n  Object.keys(input).map((key) => {\n    const value = input[key];\n    recusivelyParseObjectValue(value, `${fieldPath}.${key}`, result);\n  });\n  return input;\n}\n","import {\n  IFirebaseWrapper,\n} from './IFirebaseWrapper';\n\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/storage';\n\nimport { log } from 'misc';\nimport { RAFirebaseOptions } from 'providers/options';\nimport {\n  FireApp,\n  FireAuth,\n  FireAuthUserCredentials,\n  FireStorage,\n  FireStoragePutFileResult,\n  FireStore,\n  FireStoreBatch,\n  FireStoreCollectionRef,\n  FireUploadTaskSnapshot,\n  FireUser\n} from 'misc/firebase-models';\n\nexport class FirebaseWrapper implements IFirebaseWrapper {\n  private firestore: FireStore;\n  private app: FireApp;\n  public options: RAFirebaseOptions;\n\n  constructor(\n    inputOptions: RAFirebaseOptions | undefined,\n    firebaseConfig: {},\n  ) { \n    const optionsSafe = inputOptions || {};\n    this.options = optionsSafe;\n    this.app = (window as any)['_app'] = ObtainFirebaseApp(firebaseConfig, optionsSafe);\n    this.firestore = this.app.firestore();\n  }\n  dbGetCollection(absolutePath: string): FireStoreCollectionRef {\n    return this.firestore.collection(absolutePath);\n  }\n  dbCreateBatch(): FireStoreBatch {\n    return this.firestore.batch();\n  }\n  dbMakeNewId(): string {\n    return this.firestore.collection(\"collections\").doc().id\n  }\n\n  public OnUserLogout(callBack: (u: FireUser | null) => any) {\n    this.app.auth().onAuthStateChanged((user) => {\n      const isLoggedOut = !user;\n      log('FirebaseWrapper.OnUserLogout', { user, isLoggedOut });\n      if (isLoggedOut) {\n        callBack(user);\n      }\n    });\n  }\n  putFile(storagePath: string, rawFile: any): FireStoragePutFileResult {\n    const task = this.app.storage().ref(storagePath).put(rawFile);\n    const taskResult = new Promise<FireUploadTaskSnapshot>(\n      (res, rej) => task.then(res).catch(rej)\n    );\n    const downloadUrl = taskResult.then(t => t.ref.getDownloadURL()).then(url => url as string)\n    return {\n      task,\n      taskResult,\n      downloadUrl,\n    }\n  }\n  async getStorageDownloadUrl(fieldSrc: string): Promise<string> {\n    return this.app.storage().ref(fieldSrc).getDownloadURL();\n  }\n  public serverTimestamp() {\n    // This line doesn't work for some reason, might be firebase sdk.\n    return firebase.firestore.FieldValue.serverTimestamp();\n  }\n  async authSetPersistence(persistenceInput: 'session' | 'local' | 'none') {\n    let persistenceResolved: string;\n    switch (persistenceInput) {\n      case 'local':\n        persistenceResolved = firebase.auth.Auth.Persistence.LOCAL;\n        break;\n      case 'none':\n        persistenceResolved = firebase.auth.Auth.Persistence.NONE;\n        break;\n      case 'session':\n      default:\n        persistenceResolved = firebase.auth.Auth.Persistence.SESSION;\n        break;\n    }\n    log('setPersistence', { persistenceInput, persistenceResolved });\n    return this.app.auth()\n      .setPersistence(persistenceResolved)\n      .catch((error) => console.error(error));\n  }\n  async authSigninEmailPassword(email: string, password: string): Promise<FireAuthUserCredentials> {\n    const user = await this.app.auth().signInWithEmailAndPassword(\n      email,\n      password\n    );\n    return user;\n  }\n  async authSignOut(): Promise<void> {\n    return this.app.auth().signOut();\n  }\n  async authGetUserLoggedIn(): Promise<FireUser> {\n    return new Promise((resolve, reject) => {\n      const auth = this.app.auth();\n      if (auth.currentUser) return resolve(auth.currentUser);\n      const unsubscribe = this.app.auth().onAuthStateChanged((user) => {\n        unsubscribe();\n        if (user) {\n          resolve(user);\n        } else {\n          reject();\n        }\n      });\n    });\n  }\n  public async GetUserLogin(): Promise<FireUser> {\n    return this.authGetUserLoggedIn();\n  }\n\n  /** @deprecated */\n  public auth(): FireAuth {\n    return this.app.auth();\n  }\n  /** @deprecated */\n  public storage(): FireStorage {\n    return this.app.storage();\n  }\n  /** @deprecated */\n  public GetApp(): FireApp {\n    return this.app;\n  }\n  /** @deprecated */\n  public db(): FireStore {\n    return this.firestore;\n  }\n}\n\nfunction ObtainFirebaseApp(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n): firebase.app.App {\n  if (options.app) {\n    return options.app;\n  }\n  const isInitialized = !!firebase.apps?.length;\n  if (isInitialized) {\n    return firebase.app();\n  } else {\n    return firebase.initializeApp(firebaseConfig);\n  }\n}\n","import firebase from 'firebase/compat/app';\nimport 'firebase/compat/storage';\n\nexport type FireUser = firebase.User;\nexport type FireApp = firebase.app.App;\n\nexport type FireStorage = firebase.storage.Storage;\nexport type FireStorageReference = firebase.storage.Reference;\nexport type FireUploadTaskSnapshot = firebase.storage.UploadTaskSnapshot;\nexport type FireUploadTask = firebase.storage.UploadTask;\nexport type FireStoragePutFileResult = {\n  task: FireUploadTask, \n  taskResult: Promise<FireUploadTaskSnapshot>,\n  downloadUrl: Promise<string>,\n}\n\nexport type FireAuth = firebase.auth.Auth;\nexport type FireAuthUserCredentials = firebase.auth.UserCredential;\n\nexport type FireStore = firebase.firestore.Firestore;\nexport type FireStoreBatch = firebase.firestore.WriteBatch;\nexport type FireStoreTimeStamp = firebase.firestore.FieldValue;\nexport type FireStoreDocumentRef = firebase.firestore.DocumentReference;\nexport type FireStoreDocumentSnapshot = firebase.firestore.DocumentSnapshot<firebase.firestore.DocumentData>;\nexport type FireStoreCollectionRef = firebase.firestore.CollectionReference;\nexport type FireStoreQueryDocumentSnapshot = firebase.firestore.QueryDocumentSnapshot;\nexport type FireStoreQuery = firebase.firestore.Query;\nexport type FireStoreQueryOrder = firebase.firestore.OrderByDirection;\n\nexport const TASK_PAUSED = firebase.storage.TaskState.PAUSED\nexport const TASK_RUNNING = firebase.storage.TaskState.RUNNING\nexport const TASK_CANCELED = firebase.storage.TaskState.CANCELED\n","import { RAFirebaseOptions } from '../options';\nimport { IFirebaseWrapper } from './firebase/IFirebaseWrapper';\nimport {\n  log,\n  getAbsolutePath,\n  messageTypes,\n  logWarn,\n  IFirestoreLogger,\n  parseFireStoreDocument,\n} from '../../misc';\nimport { FireStoreCollectionRef } from 'misc/firebase-models';\n\ntype IResourceItem = {} & { id: string, deleted?: boolean };\nexport interface IResource {\n  path: string;\n  pathAbsolute: string;\n  collection: FireStoreCollectionRef;\n  list: Array<IResourceItem>;\n}\n\nexport class ResourceManager {\n  private resources: Record<string, IResource> = {};\n\n  constructor(\n    private fireWrapper: IFirebaseWrapper,\n    private options: RAFirebaseOptions,\n    private flogger: IFirestoreLogger\n  ) {\n    this.fireWrapper.OnUserLogout(() => {\n      this.resources = {};\n    });\n  }\n\n  public async TryGetResource(\n    resourceName: string,\n    refresh?: 'REFRESH',\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    if (refresh) {\n      await this.RefreshResource(resourceName, collectionQuery);\n    }\n    return this.TryGetResourcePromise(resourceName, collectionQuery);\n  }\n\n  public GetResource(relativePath: string): IResource {\n    const resource: IResource = this.resources[relativePath];\n    if (!resource) {\n      throw new Error(\n        `react-admin-firebase: Can't find resource: \"${relativePath}\"`\n      );\n    }\n    return resource;\n  }\n\n  public async TryGetResourcePromise(\n    relativePath: string,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    log('resourceManager.TryGetResourcePromise', {\n      relativePath,\n      collectionQuery,\n    });\n    await this.initPath(relativePath);\n\n    const resource: IResource = this.resources[relativePath];\n    if (!resource) {\n      throw new Error(\n        `react-admin-firebase: Cant find resource: \"${relativePath}\"`\n      );\n    }\n    return resource;\n  }\n\n  public async RefreshResource(\n    relativePath: string,\n    collectionQuery: messageTypes.CollectionQueryType | undefined\n  ) {\n    if (this.options?.lazyLoading?.enabled) {\n      logWarn('resourceManager.RefreshResource', {\n        warn: 'RefreshResource is not available in lazy loading mode',\n      });\n      throw new Error(\n        'react-admin-firebase: RefreshResource is not available in lazy loading mode'\n      );\n    }\n\n    log('resourceManager.RefreshResource', { relativePath, collectionQuery });\n    await this.initPath(relativePath);\n    const resource = this.resources[relativePath];\n\n    const collection = resource.collection;\n    const query = this.applyQuery(collection, collectionQuery);\n    const newDocs = await query.get();\n\n    resource.list = newDocs.docs.map((doc) => parseFireStoreDocument<IResourceItem>(doc));\n    const count = newDocs.docs.length;\n    this.flogger.logDocument(count)();\n    log('resourceManager.RefreshResource', {\n      newDocs,\n      resource,\n      collectionPath: collection.path,\n    });\n  }\n\n  public async GetSingleDoc(relativePath: string, docId: string) {\n    await this.initPath(relativePath);\n    const resource = this.GetResource(relativePath);\n    this.flogger.logDocument(1)();\n    const docSnap = await resource.collection.doc(docId).get();\n    if (!docSnap.exists) {\n      throw new Error('react-admin-firebase: No id found matching: ' + docId);\n    }\n    const result = parseFireStoreDocument(docSnap);\n    log('resourceManager.GetSingleDoc', {\n      relativePath,\n      resource,\n      docId,\n      docSnap,\n      result,\n    });\n    return result;\n  }\n\n  private async initPath(relativePath: string): Promise<void> {\n    const rootRef = this.options && this.options.rootRef;\n    const absolutePath = getAbsolutePath(rootRef, relativePath);\n    const hasBeenInited = !!this.resources[relativePath];\n    log('resourceManager.initPath()', {\n      absolutePath,\n      hasBeenInited,\n    });\n    if (hasBeenInited) {\n      log('resourceManager.initPath() has been initialized already...');\n      return;\n    }\n    const collection = this.fireWrapper.dbGetCollection(absolutePath);\n    const list: Array<IResourceItem> = [];\n    const resource: IResource = {\n      collection,\n      list,\n      path: relativePath,\n      pathAbsolute: absolutePath,\n    };\n    this.resources[relativePath] = resource;\n    log('resourceManager.initPath() setting resource...', {\n      resource,\n      allResources: this.resources,\n      collection: collection,\n      collectionPath: collection.path,\n    });\n  }\n\n  public async getUserIdentifier(): Promise<string> {\n    const identifier = this.options.associateUsersById\n      ? await this.getCurrentUserId()\n      : await this.getCurrentUserEmail();\n    return identifier;\n  }\n\n  private async getCurrentUserEmail() {\n    const user = await this.fireWrapper.authGetUserLoggedIn();\n    if (user) {\n      return user.email as string;\n    } else {\n      return 'annonymous user';\n    }\n  }\n  private async getCurrentUserId() {\n    const user = await this.fireWrapper.authGetUserLoggedIn();\n    if (user) {\n      return user.uid;\n    } else {\n      return 'annonymous user';\n    }\n  }\n\n  private applyQuery(\n    collection: FireStoreCollectionRef,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): FireStoreCollectionRef {\n    const collRef = collectionQuery ? collectionQuery(collection) : collection;\n\n    log('resourceManager.applyQuery() ...', {\n      collection,\n      collectionQuery: (collectionQuery || '-').toString(),\n      collRef,\n    });\n    return collRef;\n  }\n}\n","import { set, get } from \"lodash\";\nimport { TASK_CANCELED, TASK_PAUSED, TASK_RUNNING } from \"../../misc/firebase-models\";\nimport {\n  AddCreatedByFields,\n  AddUpdatedByFields,\n  IFirestoreLogger,\n  joinPaths,\n  log,\n  logError,\n  dispatch,\n  translateDocToFirestore,\n  parseStoragePath,\n} from \"../../misc\";\nimport { RAFirebaseOptions } from \"../options\";\nimport { IFirebaseWrapper } from \"./firebase/IFirebaseWrapper\";\nimport { IResource, ResourceManager } from \"./ResourceManager\";\n\nexport class FireClient {\n  public rm: ResourceManager;\n\n  constructor(\n    public fireWrapper: IFirebaseWrapper,\n    public options: RAFirebaseOptions,\n    public flogger: IFirestoreLogger\n  ) {\n    this.rm = new ResourceManager(this.fireWrapper, this.options, this.flogger);\n  }\n\n  public checkRemoveIdField(obj: any, docId: string) {\n    if (!this.options.dontAddIdFieldToDoc) {\n      obj.id = docId;\n    }\n  }\n\n  public transformToDb(resourceName: string, documentData: any, docId: string): any {\n    if (typeof this.options.transformToDb === 'function') {\n      return this.options.transformToDb(resourceName, documentData, docId);\n    }\n    return documentData;\n  }\n\n  public async parseDataAndUpload(r: IResource, id: string, data: any) {\n    if (!data) {\n      return data;\n    }\n    const docPath = r.collection.doc(id).path;\n\n    const result = translateDocToFirestore(data);\n    const uploads = result.uploads;\n    await Promise.all(\n      uploads.map(async (u) => {\n        const storagePath = parseStoragePath(u.rawFile, docPath, u.fieldDotsPath, !!this.options.useFileNamesInStorage);\n        const link = await this.saveFile(storagePath, u.rawFile);\n        set(data, u.fieldDotsPath + \".src\", link);\n      })\n    );\n    return data;\n  }\n\n  public async addCreatedByFields(obj: any) {\n    return AddCreatedByFields(obj, this.fireWrapper, this.rm, this.options);\n  }\n\n  public async addUpdatedByFields(obj: any) {\n    return AddUpdatedByFields(obj, this.fireWrapper, this.rm, this.options);\n  }\n\n  private async saveFile(\n    storagePath: string,\n    rawFile: any\n  ): Promise<string | undefined> {\n    log(\"saveFile() saving file...\", { storagePath, rawFile });\n    try {\n      const { task, taskResult, downloadUrl } = this.fireWrapper.putFile(storagePath, rawFile);\n      const { name } = rawFile;\n      // monitor upload status & progress\n      dispatch('FILE_UPLOAD_WILL_START', name);\n      task.on('state_changed', (snapshot) => {\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        log('Upload is ' + progress + '% done');\n        dispatch('FILE_UPLOAD_PROGRESS', name, progress);\n        switch (snapshot.state) {\n          case TASK_PAUSED:\n            log('Upload is paused');\n            dispatch('FILE_UPLOAD_PAUSED', name);\n            break;\n          case TASK_RUNNING:\n            log('Upload is running');\n            dispatch('FILE_UPLOAD_RUNNING', name);\n            break;\n          case TASK_CANCELED:\n            log('Upload has been canceled');\n            dispatch('FILE_UPLOAD_CANCELED', name);\n            break;\n          // case storage.TaskState.ERROR:\n          // already handled by catch\n          // case storage.TaskState.SUCCESS:\n          // already handled by then\n        }\n      });\n      const [getDownloadURL] = await Promise.all([\n        downloadUrl,\n        taskResult,\n      ]);\n      dispatch('FILE_UPLOAD_COMPLETE', name);\n      dispatch('FILE_SAVED', name);\n      log(\"saveFile() saved file\", {\n        storagePath,\n        taskResult,\n        getDownloadURL,\n      });\n      return this.options.relativeFilePaths ? storagePath : getDownloadURL;\n    } catch (storageError) {\n      if (get(storageError, 'code') === \"storage/unknown\") {\n        logError(\n          'saveFile() error saving file, No bucket found! Try clicking \"Get Started\" in firebase -> storage',\n          { storageError }\n        );\n      } else {\n        logError(\"saveFile() error saving file\", {\n          storageError,\n        });\n      }\n    }\n  }\n}\n","import { joinPaths } from \"./pathHelper\";\n\nexport function parseStoragePath(\n  rawFile: File,\n  docPath: string,\n  fieldPath: string,\n  useFileName: boolean\n): string {\n  const fileNameBits = rawFile instanceof File\n    ? rawFile.name.split('.')\n    : [];\n\n  const fileExtension = !fileNameBits?.length\n    ? ''\n    : '.' + fileNameBits.pop();\n\n  return useFileName\n    ? joinPaths(docPath, fieldPath, rawFile.name)\n    : joinPaths(docPath, fieldPath + fileExtension);\n}","import { RAFirebaseOptions } from \"index\";\nimport { IFirebaseWrapper, ResourceManager } from \"providers/database\";\n\nexport async function AddCreatedByFields(\n  obj: any,\n  fireWrapper: IFirebaseWrapper,\n  rm: Pick<ResourceManager, \"getUserIdentifier\">,\n  options: Pick<\n    RAFirebaseOptions,\n    | \"associateUsersById\"\n    | \"disableMeta\"\n    | \"renameMetaFields\"\n    | \"metaFieldCasing\"\n  >\n) {\n  if (options.disableMeta) {\n    return;\n  }\n  const currentUserIdentifier = await rm.getUserIdentifier();\n  const createAtSelector = GetSelectorsCreateAt(options);\n  const createBySelector = GetSelectorsCreateBy(options);\n  obj[createAtSelector] = fireWrapper.serverTimestamp();\n  obj[createBySelector] = currentUserIdentifier;\n}\n\nexport async function AddUpdatedByFields(\n  obj: any,\n  fireWrapper: IFirebaseWrapper,\n  rm: Pick<ResourceManager, \"getUserIdentifier\">,\n  options: Pick<\n    RAFirebaseOptions,\n    | \"associateUsersById\"\n    | \"disableMeta\"\n    | \"renameMetaFields\"\n    | \"metaFieldCasing\"\n  >\n) {\n  if (options.disableMeta) {\n    return;\n  }\n  const currentUserIdentifier = await rm.getUserIdentifier();\n  const updateAtSelector = GetSelectorsUpdateAt(options);\n  const updateBySelector = GetSelectorsUpdateBy(options);\n  obj[updateAtSelector] = fireWrapper.serverTimestamp();\n  obj[updateBySelector] = currentUserIdentifier;\n}\n\nexport function GetSelectorsUpdateAt(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.updated_at) {\n    return options.renameMetaFields.updated_at;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"lastupdate\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"lastUpdate\";\n  }\n  if (casing === \"snake\") {\n    return \"last_update\";\n  }\n  if (casing === \"pascal\") {\n    return \"LastUpdate\";\n  }\n  if (casing === \"kebab\") {\n    return \"last-update\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsUpdateBy(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.updated_by) {\n    return options.renameMetaFields.updated_by;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"updatedby\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"updatedBy\";\n  }\n  if (casing === \"snake\") {\n    return \"updated_by\";\n  }\n  if (casing === \"pascal\") {\n    return \"UpdatedBy\";\n  }\n  if (casing === \"kebab\") {\n    return \"updated-by\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsCreateAt(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.created_at) {\n    return options.renameMetaFields.created_at;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"createdate\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"createDate\";\n  }\n  if (casing === \"snake\") {\n    return \"create_date\";\n  }\n  if (casing === \"pascal\") {\n    return \"CreateDate\";\n  }\n  if (casing === \"kebab\") {\n    return \"create-date\";\n  }\n  return defautCase;\n}\n\nexport function GetSelectorsCreateBy(\n  options: Pick<RAFirebaseOptions, \"metaFieldCasing\" | \"renameMetaFields\">\n): string {\n  if (options.renameMetaFields && options.renameMetaFields.created_by) {\n    return options.renameMetaFields.created_by;\n  }\n  const casing = options.metaFieldCasing;\n  const defautCase = \"createdby\";\n  if (!casing) {\n    return defautCase;\n  }\n  if (casing === \"camel\") {\n    return \"createdBy\";\n  }\n  if (casing === \"snake\") {\n    return \"created_by\";\n  }\n  if (casing === \"pascal\") {\n    return \"CreatedBy\";\n  }\n  if (casing === \"kebab\") {\n    return \"created-by\";\n  }\n  return defautCase;\n}\n","import { FireStoreCollectionRef, FireStoreDocumentSnapshot, FireStoreQuery } from 'misc/firebase-models';\nimport { IFirestoreLogger, messageTypes } from '../../misc';\n\nexport function setQueryCursor(\n  doc: FireStoreDocumentSnapshot,\n  params: messageTypes.IParamsGetList,\n  resourceName: string\n) {\n  const key = btoa(JSON.stringify({ ...params, resourceName }));\n  localStorage.setItem(key, doc.id);\n\n  const allCursorsKey = `ra-firebase-cursor-keys_${resourceName}`;\n  const localCursorKeys = localStorage.getItem(allCursorsKey);\n  if (!localCursorKeys) {\n    localStorage.setItem(allCursorsKey, JSON.stringify([key]));\n  } else {\n    const cursors: string[] = JSON.parse(localCursorKeys);\n    const newCursors = cursors.concat(key);\n    localStorage.setItem(allCursorsKey, JSON.stringify(newCursors));\n  }\n}\n\nexport async function getQueryCursor(\n  collection: FireStoreCollectionRef,\n  params: messageTypes.IParamsGetList,\n  resourceName: string,\n  flogger: IFirestoreLogger\n): Promise<FireStoreDocumentSnapshot | false> {\n  const key = btoa(JSON.stringify({ ...params, resourceName }));\n  const docId = localStorage.getItem(key);\n  if (!docId) {\n    return false;\n  }\n\n  const doc = await collection.doc(docId).get();\n  flogger.logDocument(1)();\n  if (doc.exists) {\n    // incrementFirebaseReadsCounter(1);\n    return doc;\n  }\n  return false;\n}\n\nexport function clearQueryCursors(resourceName: string) {\n  const allCursorsKey = `ra-firebase-cursor-keys_${resourceName}`;\n  const localCursorKeys = localStorage.getItem(allCursorsKey);\n  if (localCursorKeys) {\n    const cursors: string[] = JSON.parse(localCursorKeys);\n    cursors.forEach((cursor) => localStorage.removeItem(cursor));\n    localStorage.removeItem(allCursorsKey);\n  }\n}\n\nexport async function findLastQueryCursor(\n  collection: FireStoreCollectionRef,\n  queryBase: FireStoreQuery,\n  params: messageTypes.IParamsGetList,\n  resourceName: string,\n  flogger: IFirestoreLogger\n) {\n  const { page, perPage } = params.pagination;\n\n  let lastQueryCursor: FireStoreDocumentSnapshot | false = false;\n  let currentPage = page - 1;\n\n  const currentPageParams = {\n    ...params,\n    pagination: {\n      ...params.pagination,\n    },\n  };\n  while (!lastQueryCursor && currentPage > 1) {\n    currentPage--;\n    currentPageParams.pagination.page = currentPage;\n    console.log('getting query cursor currentPage=', currentPage);\n    lastQueryCursor = await getQueryCursor(\n      collection,\n      currentPageParams,\n      resourceName,\n      flogger\n    );\n  }\n  const limit = (page - currentPage) * perPage;\n  const isFirst = currentPage === 1;\n\n  function getQuery() {\n    if (isFirst) {\n      return queryBase.limit(limit);\n    } else {\n      return queryBase.startAt(lastQueryCursor).limit(limit);\n    }\n  }\n\n  const newQuery = getQuery();\n  const snapshots = await newQuery.get();\n  const docsLength = snapshots.docs.length;\n  flogger.logDocument(docsLength)();\n  const lastDocIndex = docsLength - 1;\n  const lastDocRef = snapshots.docs[lastDocIndex];\n  return lastDocRef;\n}\n","import { FireStoreCollectionRef, FireStoreQuery, FireStoreQueryOrder } from 'misc/firebase-models';\nimport { IFirestoreLogger, messageTypes } from '../../misc';\nimport { findLastQueryCursor, getQueryCursor } from './queryCursors';\n\ninterface ParamsToQueryOptions {\n  filters?: boolean;\n  sort?: boolean;\n  pagination?: boolean;\n}\n\nconst defaultParamsToQueryOptions = {\n  filters: true,\n  sort: true,\n  pagination: true,\n};\n\nexport async function paramsToQuery<\n  TParams extends messageTypes.IParamsGetList\n>(\n  collection: FireStoreCollectionRef,\n  params: TParams,\n  resourceName: string,\n  flogger: IFirestoreLogger,\n  options: ParamsToQueryOptions = defaultParamsToQueryOptions\n): Promise<FireStoreQuery> {\n  const filtersStepQuery = options.filters\n    ? filtersToQuery(collection, params.filter)\n    : collection;\n\n  const sortStepQuery = options.sort\n    ? sortToQuery(filtersStepQuery, params.sort)\n    : filtersStepQuery;\n\n  return options.pagination\n    ? paginationToQuery(\n        sortStepQuery,\n        params,\n        collection,\n        resourceName,\n        flogger\n      )\n    : sortStepQuery;\n}\n\nexport function filtersToQuery(\n  query: FireStoreQuery,\n  filters: { [fieldName: string]: any }\n): FireStoreQuery {\n  const res = Object.entries(filters).reduce((acc,[fieldName, fieldValue]) => {\n    const opStr = fieldValue && Array.isArray(fieldValue) ? 'in' : '==';\n    return acc.where(fieldName, opStr, fieldValue);\n  }, query);\n  return res;\n}\n\nexport function sortToQuery(\n  query: FireStoreQuery,\n  sort: { field: string; order: string }\n): FireStoreQuery {\n  if (sort != null && sort.field !== 'id') {\n    const { field, order } = sort;\n    const parsedOrder = order.toLocaleLowerCase() as FireStoreQueryOrder;\n    return query.orderBy(field, parsedOrder);\n  }\n  return query;\n}\n\nasync function paginationToQuery<TParams extends messageTypes.IParamsGetList>(\n  query: FireStoreQuery,\n  params: TParams,\n  collection: FireStoreCollectionRef,\n  resourceName: string,\n  flogger: IFirestoreLogger\n): Promise<FireStoreQuery> {\n  const { page, perPage } = params.pagination;\n  if (page === 1) {\n    query = query.limit(perPage);\n  } else {\n    let queryCursor = await getQueryCursor(\n      collection,\n      params,\n      resourceName,\n      flogger\n    );\n    if (!queryCursor) {\n      queryCursor = await findLastQueryCursor(\n        collection,\n        query,\n        params,\n        resourceName,\n        flogger\n      );\n    }\n    query = query.startAfter(queryCursor).limit(perPage);\n  }\n\n  return query;\n}\n\nexport function getFullParamsForQuery<\n  TParams extends messageTypes.IParamsGetList\n>(reactAdminParams: TParams, softdeleteEnabled: boolean): TParams {\n  return {\n    ...reactAdminParams,\n    filter: softdeleteEnabled\n      ? {\n          deleted: false,\n          ...reactAdminParams.filter,\n        }\n      : reactAdminParams.filter,\n  };\n}\n\nexport function getNextPageParams<TParams extends messageTypes.IParamsGetList>(\n  params: TParams\n): TParams {\n  return {\n    ...params,\n    pagination: {\n      ...params.pagination,\n      page: params.pagination.page + 1,\n    },\n  };\n}\n","import {\n  log,\n  messageTypes,\n  parseFireStoreDocument,\n  recursivelyMapStorageUrls,\n} from '../../misc';\nimport { IResource, ResourceManager } from '../database/ResourceManager';\nimport { RAFirebaseOptions } from '../options';\nimport * as ra from '../../misc/react-admin-models';\nimport {\n  getFullParamsForQuery,\n  getNextPageParams,\n  paramsToQuery,\n} from './paramsToQuery';\nimport { clearQueryCursors, setQueryCursor } from './queryCursors';\nimport { FireClient } from 'providers/database';\nimport { FireStoreCollectionRef, FireStoreDocumentSnapshot } from 'misc/firebase-models';\n\nexport class FirebaseLazyLoadingClient {\n  constructor(\n    private readonly options: RAFirebaseOptions,\n    private readonly rm: ResourceManager,\n    private client: FireClient\n  ) {}\n\n  public async apiGetList<T extends ra.Record>(\n    resourceName: string,\n    reactAdminParams: ra.GetListParams\n  ): Promise<ra.GetListResult<T>> {\n    const r = await this.tryGetResource(resourceName);\n    const params = getFullParamsForQuery(\n      reactAdminParams,\n      !!this.options.softDelete\n    );\n\n    log('apiGetListLazy', { resourceName, params });\n\n    const query = await paramsToQuery(\n      r.collection,\n      params,\n      resourceName,\n      this.client.flogger\n    );\n\n    const snapshots = await query.get();\n\n    const resultsCount = snapshots.docs.length;\n    if (!resultsCount) {\n      log('apiGetListLazy', {\n        message: 'There are not records for given query',\n      });\n      return { data: [], total: 0 };\n    }\n    this.client.flogger.logDocument(resultsCount)();\n\n    const data = snapshots.docs.map(doc => parseFireStoreDocument<T>(doc));\n    const nextPageCursor = snapshots.docs[snapshots.docs.length - 1];\n    // After fetching documents save queryCursor for next page\n    setQueryCursor(nextPageCursor, getNextPageParams(params), resourceName);\n    // Hardcoded to allow next pages, as we don't have total number of items\n    let total = 9000;\n\n    // Check for next pages\n    // If it's last page, we can count all items and disable going to next page\n    const isOnLastPage = await this.checkIfOnLastPage(\n      r.collection,\n      params,\n      resourceName,\n      nextPageCursor\n    );\n\n    if (isOnLastPage) {\n      const { page, perPage } = params.pagination;\n      total = (page - 1) * perPage + data.length;\n      log('apiGetListLazy', { message: \"It's last page of collection.\" });\n    }\n\n    if (this.options.relativeFilePaths) {\n      const parsedData = await Promise.all(\n        data.map(async (doc: any) => {\n          for (let fieldName in doc) {\n            doc[fieldName] = await recursivelyMapStorageUrls(\n              this.client.fireWrapper,\n              doc[fieldName]\n            );\n          }\n          return doc;\n        })\n      );\n\n      log('apiGetListLazy result', {\n        docs: parsedData,\n        resource: r,\n        collectionPath: r.collection.path,\n      });\n\n      return {\n        data: parsedData,\n        total,\n      };\n    }\n\n    log('apiGetListLazy result', {\n      docs: data,\n      resource: r,\n      collectionPath: r.collection.path,\n    });\n\n    return { data, total };\n  }\n\n  public async apiGetManyReference(\n    resourceName: string,\n    reactAdminParams: messageTypes.IParamsGetManyReference\n  ): Promise<messageTypes.IResponseGetManyReference> {\n    const r = await this.tryGetResource(resourceName);\n    log('apiGetManyReferenceLazy', {\n      resourceName,\n      resource: r,\n      reactAdminParams,\n    });\n    const filterWithTarget = {\n      ...reactAdminParams.filter,\n      [reactAdminParams.target]: reactAdminParams.id,\n    };\n    const params = getFullParamsForQuery(\n      {\n        ...reactAdminParams,\n        filter: filterWithTarget,\n      },\n      !!this.options.softDelete\n    );\n\n    const query = await paramsToQuery(\n      r.collection,\n      params,\n      resourceName,\n      this.client.flogger\n    );\n\n    const snapshots = await query.get();\n    const resultsCount = snapshots.docs.length;\n    this.client.flogger.logDocument(resultsCount)();\n    const data = snapshots.docs.map(d => parseFireStoreDocument(d));\n    if (this.options.relativeFilePaths) {\n      const parsedData = await Promise.all(\n        data.map(async (doc: any) => {\n          for (let fieldName in doc) {\n            doc[fieldName] = await recursivelyMapStorageUrls(\n              this.client.fireWrapper,\n              doc[fieldName]\n            );\n          }\n          return doc;\n        })\n      );\n\n      log('apiGetManyReferenceLazy result', {\n        docs: parsedData,\n        resource: r,\n        collectionPath: r.collection.path,\n      });\n\n      return {\n        data: parsedData,\n        total: data.length,\n      };\n    }\n\n    log('apiGetManyReferenceLazy result', {\n      docs: data,\n      resource: r,\n      collectionPath: r.collection.path,\n    });\n    return { data, total: data.length };\n  }\n\n  private async checkIfOnLastPage<TParams extends messageTypes.IParamsGetList>(\n    collection: FireStoreCollectionRef,\n    params: TParams,\n    resourceName: string,\n    nextPageCursor: FireStoreDocumentSnapshot,\n  ): Promise<boolean> {\n    const query = await paramsToQuery(\n      collection,\n      params,\n      resourceName,\n      this.client.flogger,\n      {\n        filters: true,\n        sort: true,\n      }\n    );\n    if (!nextPageCursor) {\n      throw new Error('Page cursor was empty...');\n    }\n    const nextElementSnapshot = await query\n      .startAfter(nextPageCursor)\n      .limit(1)\n      .get();\n\n    if (!nextElementSnapshot.empty) {\n      // this.incrementFirebaseReadsCounter(1);\n    }\n\n    return nextElementSnapshot.empty;\n  }\n\n  public clearQueryCursors(resourceName: string) {\n    clearQueryCursors(resourceName);\n  }\n\n  private async tryGetResource(\n    resourceName: string,\n    collectionQuery?: messageTypes.CollectionQueryType\n  ): Promise<IResource> {\n    return this.rm.TryGetResourcePromise(resourceName, collectionQuery);\n  }\n}\n","import {\n  getAbsolutePath,\n  log,\n  logger,\n  retrieveStatusCode,\n  logError,\n  MakeFirestoreLogger,\n} from \"../misc\";\nimport * as ra from \"../misc/react-admin-models\";\nimport { RAFirebaseOptions } from \"./options\";\nimport { FirebaseWrapper } from \"./database/firebase/FirebaseWrapper\";\nimport { FireApp } from \"../misc/firebase-models\";\nimport { FireClient } from \"./database/FireClient\";\nimport { GetList, GetMany, GetManyReference, GetOne } from \"./queries\";\nimport { Create, Delete, DeleteMany, Update, UpdateMany } from \"./commands\";\n\nexport interface IDataProvider extends ra.DataProvider {\n  app: FireApp;\n}\n\nexport function DataProvider(\n  firebaseConfig: {},\n  optionsInput?: RAFirebaseOptions\n): IDataProvider {\n  const options = optionsInput || {};\n  verifyDataProviderArgs(firebaseConfig, options);\n\n  const flogger = MakeFirestoreLogger(options);\n  logger.SetEnabled(!!options?.logging);\n  flogger.SetEnabled(!!options?.firestoreCostsLogger?.enabled);\n  flogger.ResetCount(!options?.firestoreCostsLogger?.persistCount);\n  log('Creating FirebaseDataProvider', {\n    firebaseConfig,\n    options\n  });\n\n  const fireWrapper = new FirebaseWrapper(optionsInput, firebaseConfig);\n\n  async function run<T>(cb: () => Promise<T>) {\n    let res: any;\n    try {\n      res = await cb();\n      return res;\n    } catch (error) {\n      const errorMsg = ((error as any) || '').toString();\n      const code = retrieveStatusCode(errorMsg);\n      const errorObj = { status: code, message: errorMsg, json: res };\n      logError(\"DataProvider:\", error, { errorMsg, code, errorObj });\n      throw errorObj;\n    }\n  }\n  const client = new FireClient(fireWrapper, options, flogger);\n\n  const newProviderApi: IDataProvider = {\n    app: fireWrapper.GetApp(),\n    getList<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetListParams\n    ): Promise<ra.GetListResult<RecordType>> {\n      return run(() => GetList<RecordType>(resource, params, client));\n    },\n    getOne<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetOneParams\n    ): Promise<ra.GetOneResult<RecordType>> {\n      return run(() => GetOne<RecordType>(resource, params, client));\n    },\n    getMany<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetManyParams\n    ): Promise<ra.GetManyResult<RecordType>> {\n      return run(() => GetMany<RecordType>(resource, params, client));\n    },\n    getManyReference<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.GetManyReferenceParams\n    ): Promise<ra.GetManyReferenceResult<RecordType>> {\n      return run(() =>\n        GetManyReference<RecordType>(resource, params, client)\n      );\n    },\n    update<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.UpdateParams\n    ): Promise<ra.UpdateResult<RecordType>> {\n      return run(() => Update<RecordType>(resource, params, client));\n    },\n    updateMany(\n      resource: string,\n      params: ra.UpdateManyParams\n    ): Promise<ra.UpdateManyResult> {\n      return run(() => UpdateMany(resource, params, client));\n    },\n    create<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.CreateParams\n    ): Promise<ra.CreateResult<RecordType>> {\n      return run(() => Create<RecordType>(resource, params, client));\n    },\n    delete<RecordType extends ra.Record = ra.Record>(\n      resource: string,\n      params: ra.DeleteParams\n    ): Promise<ra.DeleteResult<RecordType>> {\n      return run(() => Delete(resource, params, client));\n    },\n    deleteMany(\n      resource: string,\n      params: ra.DeleteManyParams\n    ): Promise<ra.DeleteManyResult> {\n      return run(() => DeleteMany(resource, params, client));\n    },\n  };\n\n  return newProviderApi;\n}\n\nfunction verifyDataProviderArgs(\n  firebaseConfig: {},\n  options?: RAFirebaseOptions\n) {\n  const hasNoApp = !options || !options.app;\n  const hasNoConfig = !firebaseConfig;\n  if (hasNoConfig && hasNoApp) {\n    throw new Error(\n      'Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider'\n    );\n  }\n  if (options && options.rootRef) {\n    // Will throw error if rootRef doesn't point to a document\n    getAbsolutePath(options.rootRef, 'test');\n  }\n}\n","// From firebase SDK\n\nimport { logError } from \"./logger\";\n\n// - https://github.com/firebase/firebase-js-sdk/blob/9f109f85ad0d99f6c13e68dcb549a0b852e35a2a/packages/functions/src/api/error.ts\nexport function retrieveStatusTxt(status: number): 'ok' | 'unauthenticated' {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 401: // 'unauthenticated'\n    case 403: // 'permission-denied'\n      return 'unauthenticated';\n\n    case 0: // 'internal'\n    case 400: // 'invalid-argument'\n    case 404: // 'not-found'\n    case 409: // 'aborted'\n    case 429: // 'resource-exhausted'\n    case 499: // 'cancelled'\n    case 500: // 'internal'\n    case 501: // 'unimplemented'\n    case 503: // 'unavailable'\n    case 504: // 'deadline-exceeded'\n    default:\n      // ignore\n      return 'ok';\n  }\n}\n\n// From firebase SDK\n// tslint:disable-next-line:max-line-length\n// - https://github.com/firebase/firebase-js-sdk/blob/9f109f85ad0d99f6c13e68dcb549a0b852e35a2a/packages/functions/src/api/error.ts\nexport function retrieveStatusCode(statusTxt: string): number {\n  // Make sure any successful status is OK.\n  const regexResult = /\\[code\\=([\\w-]*)/g.exec(statusTxt);\n  const status = Array.isArray(regexResult) && regexResult[1];\n  if (!status) {\n    logError('unknown StatusCode ', {statusTxt});\n  }\n  switch (status) {\n    case 'unauthenticated':\n      return 401;\n    case 'permission-denied':\n      return 403;\n    case 'internal':\n      return 0;\n    case 'invalid-argument':\n      return 400;\n    case 'not-found':\n      return 404;\n    case 'aborted':\n      return 409;\n    case 'resource-exhausted':\n      return 429;\n    case 'cancelled':\n      return 499;\n    case 'internal':\n      return 500;\n    case 'unimplemented':\n      return 501;\n    case 'unavailable':\n      return 503;\n    case 'deadline-exceeded':\n      return 504;\n    default:\n      return 200;\n  }\n}\n","import { FireClient } from '../database/FireClient';\nimport { FirebaseLazyLoadingClient } from '../lazy-loading/FirebaseLazyLoadingClient';\nimport {\n  filterArray,\n  log,\n  recursivelyMapStorageUrls,\n  sortArray,\n} from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetList<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetListParams,\n  client: FireClient\n): Promise<ra.GetListResult<T>> {\n  log('GetList', { resourceName, params });\n  const { rm, fireWrapper, options } = client;\n\n  if (options?.lazyLoading?.enabled) {\n    const lazyClient = new FirebaseLazyLoadingClient(\n      options,\n      rm,\n      client\n    );\n    return lazyClient.apiGetList<T>(resourceName, params);\n  }\n\n  const filterSafe = params.filter || {};\n\n  const collectionQuery = filterSafe.collectionQuery;\n  delete filterSafe.collectionQuery;\n\n  const r = await rm.TryGetResource(resourceName, 'REFRESH', collectionQuery);\n  const data = r.list;\n  if (params.sort != null) {\n    const { field, order } = params.sort;\n    if (order === 'ASC') {\n      sortArray(data, field, 'asc');\n    } else {\n      sortArray(data, field, 'desc');\n    }\n  }\n  let softDeleted = data;\n  if (options.softDelete && !Object.keys(filterSafe).includes('deleted')) {\n    softDeleted = data.filter((doc) => !doc.deleted);\n  }\n  const filteredData = filterArray(softDeleted, filterSafe);\n  const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\n  const pageEnd = pageStart + params.pagination.perPage;\n  const dataPage = filteredData.slice(pageStart, pageEnd) as T[];\n  const total = filteredData.length;\n\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      dataPage.map((doc) => recursivelyMapStorageUrls(fireWrapper, doc))\n    );\n    return {\n      data,\n      total,\n    };\n  }\n\n  return {\n    data: dataPage,\n    total,\n  };\n}\n","import { FireClient } from '../database/FireClient';\nimport { log, translateDocFromFirestore } from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetOne<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetOneParams,\n  client: FireClient\n): Promise<ra.GetOneResult<T>> {\n  log(\"GetOne\", { resourceName, params });\n  const { rm } = client;\n  try {\n    const id = params.id + '';\n    const dataSingle = await rm.GetSingleDoc(resourceName, id);\n    client.flogger.logDocument(1)();\n    return { data: dataSingle as T };\n  } catch (error) {\n    throw new Error(\n      'Error getting id: ' + params.id + ' from collection: ' + resourceName\n    );\n  }\n}\n","import { FireClient } from '../database/FireClient';\nimport { log, recursivelyMapStorageUrls } from '../../misc';\nimport * as ra from '../../misc/react-admin-models';\n\nexport async function GetMany<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetManyParams,\n  client: FireClient\n): Promise<ra.GetManyResult<T>> {\n  const { rm, options, fireWrapper } = client;\n  const r = await rm.TryGetResource(resourceName);\n  const ids = params.ids;\n  log(\"GetMany\", { resourceName, resource: r, params, ids });\n  const matchDocSnaps = await Promise.all(\n    ids.map(idObj => {\n      if (typeof idObj === 'string') {\n        return r.collection.doc(idObj).get()\n      }\n      // Will get and resolve reference documents into the current doc\n      return r.collection.doc((idObj as any)['___refid']).get()\n    })\n  );\n  client.flogger.logDocument(ids.length)();\n  const matches = matchDocSnaps.map((snap) => {\n    return { ...snap.data(), id: snap.id } as T;\n  });\n  const permittedData = options.softDelete\n    ? matches.filter((row) => !row['deleted'])\n    : matches;\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      permittedData.map((doc) => recursivelyMapStorageUrls(fireWrapper, doc))\n    );\n    return {\n      data,\n    };\n  }\n\n  return {\n    data: permittedData,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { filterArray, log, recursivelyMapStorageUrls, sortArray } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function GetManyReference<T extends ra.Record>(\n  resourceName: string,\n  params: ra.GetManyReferenceParams,\n  client: FireClient\n): Promise<ra.GetManyReferenceResult<T>> {\n  const { rm, options, fireWrapper } = client;\n  log(\"GetManyReference\", { resourceName, params });\n  const filterSafe = params.filter || {};\n  const collectionQuery = filterSafe.collectionQuery;\n  const r = await rm.TryGetResource(\n    resourceName,\n    \"REFRESH\",\n    collectionQuery\n  );\n  delete filterSafe.collectionQuery;\n  log(\"apiGetManyReference\", { resourceName, resource: r, params });\n  const data = r.list;\n  const targetField = params.target;\n  const targetValue = params.id;\n  let softDeleted = data;\n  if (options.softDelete) {\n    softDeleted = data.filter(doc => !doc['deleted'])\n  }\n  const filteredData = filterArray(softDeleted, filterSafe);\n  const targetIdFilter: Record<string, ra.Identifier> = {};\n  targetIdFilter[targetField] = targetValue;\n  const permittedData = filterArray(filteredData, targetIdFilter);\n  if (params.sort != null) {\n    const { field, order } = params.sort;\n    if (order === \"ASC\") {\n      sortArray(permittedData, field, \"asc\");\n    } else {\n      sortArray(permittedData, field, \"desc\");\n    }\n  }\n  const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\n  const pageEnd = pageStart + params.pagination.perPage;\n  const dataPage = permittedData.slice(pageStart, pageEnd) as T[];\n  const total = permittedData.length;\n\n  if (options.relativeFilePaths) {\n    const data = await Promise.all(\n      permittedData.map((doc) =>\n        recursivelyMapStorageUrls(fireWrapper, doc)\n      )\n    );\n    return { data, total };\n  }\n\n  return { data: dataPage, total };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function Update<T extends ra.Record>(\n  resourceName: string,\n  params: ra.UpdateParams,\n  client: FireClient\n): Promise<ra.UpdateResult<T>> {\n  const { rm } = client;\n  log(\"Update\", { resourceName, params });\n  const id = params.id + \"\";\n  delete params.data.id;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"Update\", { resourceName, resource: r, params });\n  const data = await client.parseDataAndUpload(r, id, params.data);\n  const docObj = { ...data };\n  client.checkRemoveIdField(docObj, id);\n  await client.addUpdatedByFields(docObj);\n  const docObjTransformed = client.transformToDb(resourceName, docObj, id);\n  await r.collection.doc(id).update(docObjTransformed);\n  return {\n    data: {\n      ...data,\n      id: id,\n    },\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function UpdateMany(\n  resourceName: string,\n  params: ra.UpdateManyParams,\n  client: FireClient\n): Promise<ra.UpdateManyResult> {\n  const { rm } = client;\n  log(\"UpdateMany\", { resourceName, params });\n  delete params.data.id;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"UpdateMany\", { resourceName, resource: r, params });\n  const ids = params.ids;\n  const returnData = await Promise.all(\n    ids.map(async id => {\n      const idStr = id+'';\n      const data = await client.parseDataAndUpload(r, idStr, params.data);\n      const docObj = { ...data };\n      client.checkRemoveIdField(docObj, idStr);\n      await client.addUpdatedByFields(docObj);\n      const docObjTransformed = client.transformToDb(resourceName, docObj, idStr);\n      await r.collection\n        .doc(idStr)\n        .update(docObjTransformed);\n      return {\n        ...data,\n        id: idStr\n      };\n    })\n  );\n  return {\n    data: returnData\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function Create<T extends ra.Record>(\n  resourceName: string,\n  params: ra.CreateParams,\n  client: FireClient\n): Promise<ra.CreateResult<T>> {\n  const { rm, fireWrapper } = client;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"Create\", { resourceName, resource: r, params });\n  const hasOverridenDocId = params.data && params.data.id;\n  log(\"Create\", { hasOverridenDocId });\n  if (hasOverridenDocId) {\n    const overridenId = params.data.id;\n    const exists = (await r.collection.doc(overridenId).get()).exists;\n    if (exists) {\n      throw new Error(\n        `the id:\"${overridenId}\" already exists, please use a unique string if overriding the 'id' field`\n      );\n    }\n    const data = await client.parseDataAndUpload(r, overridenId, params.data);\n    if (!overridenId) {\n      throw new Error(\"id must be a valid string\");\n    }\n    const docObj = { ...data };\n    client.checkRemoveIdField(docObj, overridenId);\n    await client.addCreatedByFields(docObj);\n    await client.addUpdatedByFields(docObj);\n    const docObjTransformed = client.transformToDb(resourceName, docObj, overridenId);\n    log(\"Create\", { docObj });\n    await r.collection.doc(overridenId).set(docObjTransformed, { merge: false });\n    return {\n      data: {\n        ...docObjTransformed,\n        id: overridenId,\n      },\n    };\n  }\n  const newId = fireWrapper.dbMakeNewId();\n  const data = await client.parseDataAndUpload(r, newId, params.data);\n  const docObj = { ...data };\n  client.checkRemoveIdField(docObj, newId);\n  await client.addCreatedByFields(docObj);\n  await client.addUpdatedByFields(docObj);\n  const docObjTransformed = client.transformToDb(resourceName, docObj, newId);\n  await r.collection.doc(newId).set(docObjTransformed, { merge: false });\n  return {\n    data: {\n      ...docObjTransformed,\n      id: newId,\n    },\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\nimport { DeleteSoft } from \"./Delete.Soft\";\n\nexport async function Delete<T extends ra.Record>(\n  resourceName: string,\n  params: ra.DeleteParams,\n  client: FireClient\n): Promise<ra.DeleteResult<T>> {\n  const { rm, options } = client;\n  if (options.softDelete) {\n    return DeleteSoft(resourceName, params, client);\n  }\n  const r = await rm.TryGetResource(resourceName);\n  log(\"apiDelete\", { resourceName, resource: r, params });\n  try {\n    const id = params.id + \"\";\n    await r.collection.doc(id).delete();\n  } catch (error) {\n    throw new Error(error as any);\n  }\n  return {\n    data: params.previousData as T,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log, logError } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function DeleteSoft<T extends ra.Record>(\n  resourceName: string,\n  params: ra.DeleteParams,\n  client: FireClient\n): Promise<ra.DeleteResult<T>> {\n  const { rm } = client;\n  const id = params.id + \"\";\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteSoft\", { resourceName, resource: r, params });\n  const docObj = { deleted: true };\n  await client.addUpdatedByFields(docObj);\n  r.collection\n    .doc(id)\n    .update(docObj)\n    .catch((error) => {\n      logError(\"DeleteSoft error\", { error });\n    });\n  return {\n    data: params.previousData as T,\n  };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\nimport { DeleteManySoft } from \"./DeleteMany.Soft\";\n\nexport async function DeleteMany(\n  resourceName: string,\n  params: ra.DeleteManyParams,\n  client: FireClient\n): Promise<ra.DeleteManyResult> {\n  const { options, rm, fireWrapper } = client;\n  if (options.softDelete) {\n    return DeleteManySoft(resourceName, params, client);\n  }\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteMany\", { resourceName, resource: r, params });\n  const returnData: ra.Identifier[] = [];\n  const batch = fireWrapper.dbCreateBatch();\n  for (const id of params.ids) {\n    const idStr = id + '';\n    const docToDelete = r.collection.doc(idStr);\n    batch.delete(docToDelete);\n    returnData.push(id);\n  }\n  try {\n    await batch.commit();\n  } catch (error) {\n    throw new Error(error as any)\n  }\n  return { data: returnData };\n}\n","import { FireClient } from \"../database/FireClient\";\nimport { log, logError } from \"../../misc\";\nimport * as ra from \"../../misc/react-admin-models\";\n\nexport async function DeleteManySoft(\n  resourceName: string,\n  params: ra.DeleteManyParams,\n  client: FireClient\n): Promise<ra.DeleteManyResult> {\n  const { rm } = client;\n  const r = await rm.TryGetResource(resourceName);\n  log(\"DeleteManySoft\", { resourceName, resource: r, params });\n  const ids = params.ids;\n  const returnData = await Promise.all(\n    ids.map(async (id) => {\n      const idStr = id + \"\";\n      const docObj = { deleted: true };\n      await client.addUpdatedByFields(docObj);\n      r.collection\n        .doc(idStr)\n        .update(docObj)\n        .catch((error) => {\n          logError(\"apiSoftDeleteMany error\", { error });\n        });\n      return idStr;\n    })\n  );\n  return {\n    data: returnData,\n  };\n}\n","import { messageTypes } from './../misc/messageTypes';\nimport { log, retrieveStatusTxt, logWarn, logger } from '../misc';\nimport { RAFirebaseOptions } from './options';\nimport { FirebaseWrapper } from './database/firebase/FirebaseWrapper';\nimport {\n  AuthProvider as RaAuthProvider,\n  UserIdentity,\n} from '../misc/react-admin-models';\nimport { IFirebaseWrapper } from './database';\nimport { FireUser } from '../misc/firebase-models';\n\nclass AuthClient {\n  private fireWrapper: IFirebaseWrapper;\n\n  constructor(firebaseConfig: {}, optionsInput?: RAFirebaseOptions) {\n    const options = optionsInput || {};\n    log('Auth Client: initializing...', { firebaseConfig, options });\n    this.fireWrapper = new FirebaseWrapper(options, firebaseConfig);\n    options.persistence && this.setPersistence(options.persistence);\n  }\n\n  setPersistence(persistenceInput: 'session' | 'local' | 'none') {\n    return this.fireWrapper.authSetPersistence(persistenceInput);\n  }\n\n  public async HandleAuthLogin(params: { username: string; password: string }) {\n    const { username, password } = params;\n\n    if (username && password) {\n      try {\n        const user = await this.fireWrapper.authSigninEmailPassword(\n          username,\n          password\n        );\n        log('HandleAuthLogin: user sucessfully logged in', { user });\n        return user;\n      } catch (e) {\n        log('HandleAuthLogin: invalid credentials', { params });\n        throw new Error('Login error: invalid credentials');\n      }\n    } else {\n      return this.getUserLogin();\n    }\n  }\n\n  public HandleAuthLogout() {\n    return this.fireWrapper.authSignOut();\n  }\n\n  public HandleAuthError(errorHttp: messageTypes.HttpErrorType) {\n    log('HandleAuthLogin: invalid credentials', { errorHttp });\n    const status = !!errorHttp && errorHttp.status;\n    const statusTxt = retrieveStatusTxt(status);\n    if (statusTxt === 'ok') {\n      log('API is actually authenticated');\n      return Promise.resolve();\n    }\n    logWarn('Received authentication error from API');\n    return Promise.reject();\n  }\n\n  public async HandleAuthCheck(): Promise<any> {\n    return this.getUserLogin();\n  }\n\n  public getUserLogin(): Promise<FireUser> {\n    return this.fireWrapper.authGetUserLoggedIn();\n  }\n\n  public async HandleGetPermissions() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.claims;\n    } catch (e) {\n      log('HandleGetPermission: no user is logged in or tokenResult error', {\n        e,\n      });\n      return null;\n    }\n  }\n\n  public async HandleGetIdentity(): Promise<UserIdentity> {\n    try {\n      const { uid, displayName, photoURL } = await this.getUserLogin();\n      const identity: UserIdentity = {\n        id: uid,\n        fullName: `${displayName ?? ''}`,\n        avatar: `${photoURL ?? ''}`,\n      };\n      return identity;\n    } catch (e) {\n      log('HandleGetIdentity: no user is logged in', {\n        e,\n      });\n      return null as any;\n    }\n  }\n\n  public async HandleGetJWTAuthTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.authTime;\n    } catch (e) {\n      log('HandleGetJWTAuthTime: no user is logged in or tokenResult error', {\n        e,\n      });\n      return null;\n    }\n  }\n\n  public async HandleGetJWTExpirationTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.expirationTime;\n    } catch (e) {\n      log(\n        'HandleGetJWTExpirationTime: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTSignInProvider() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.signInProvider;\n    } catch (e) {\n      log(\n        'HandleGetJWTSignInProvider: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTIssuedAtTime() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.issuedAtTime;\n    } catch (e) {\n      log(\n        'HandleGetJWTIssuedAtTime: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n\n  public async HandleGetJWTToken() {\n    try {\n      const user = await this.getUserLogin();\n      // @ts-ignore\n      const token = await user.getIdTokenResult();\n\n      return token.token;\n    } catch (e) {\n      log(\n        'HandleGetJWTToken: no user is logged in or tokenResult error',\n        {\n          e,\n        }\n      );\n      return null;\n    }\n  }\n}\n\nexport function AuthProvider(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n): ReactAdminFirebaseAuthProvider {\n  VerifyAuthProviderArgs(firebaseConfig, options);\n  logger.SetEnabled(!!options?.logging);\n  const auth = new AuthClient(firebaseConfig, options);\n\n  const provider: ReactAdminFirebaseAuthProvider = {\n    // React Admin Interface\n    login: (params) => auth.HandleAuthLogin(params),\n    logout: () => auth.HandleAuthLogout(),\n    checkAuth: () => auth.HandleAuthCheck(),\n    checkError: (error) => auth.HandleAuthError(error),\n    getPermissions: () => auth.HandleGetPermissions(),\n    getIdentity: () => auth.HandleGetIdentity(),\n    // Custom Functions\n    getAuthUser: () => auth.getUserLogin(),\n    getJWTAuthTime: () => auth.HandleGetJWTAuthTime(),\n    getJWTExpirationTime: () => auth.HandleGetJWTExpirationTime(),\n    getJWTSignInProvider: () => auth.HandleGetJWTSignInProvider(),\n    getJWTClaims: () => auth.HandleGetPermissions(),\n    getJWTToken: () => auth.HandleGetJWTToken(),\n  };\n  return provider;\n}\n\nexport type ReactAdminFirebaseAuthProvider = RaAuthProvider & {\n  // Custom Functions\n  getAuthUser: () => Promise<FireUser>,\n  getJWTAuthTime: () => Promise<string | null>,\n  getJWTExpirationTime: () => Promise<string | null>,\n  getJWTSignInProvider: () => Promise<string | null>,\n  getJWTClaims: () => Promise<{ [key: string]: any; } | null>,\n  getJWTToken: () => Promise<string | null>,  \n}\n\nfunction VerifyAuthProviderArgs(\n  firebaseConfig: {},\n  options: RAFirebaseOptions\n) {\n  const hasNoApp = !options || !options.app;\n  const hasNoConfig = !firebaseConfig;\n  if (hasNoConfig && hasNoApp) {\n    throw new Error(\n      'Please pass the Firebase firebaseConfig object or options.app to the FirebaseAuthProvider'\n    );\n  }\n}\n"],"names":["data","field","dir","sort","a","b","get","rawB","isAsc","Number","isFinite","rawA","basicSort","toLowerCase","Date","aValue","bValue","filterArray","searchFields","isEmpty","searchObjs","Object","keys","map","fieldName","getSubObjects","value","searchField","searchValue","tree","leaves","obj","path","key","hasOwnProperty","objVal","Array","recursivelyWalk","currentPath","push","getFieldReferences","apply","filter","row","reduce","acc","cur","res","doesRowMatch","searchThis","toString","includes","isArray","LogNoOp","LoggerBase","title","cacheEnabledKey","this","_proto","prototype","isEnabled","localStorage","getItem","SetEnabled","setItem","removeItem","console","log","bind","warn","error","logger","logError","KEY_SINGLE","dispatch","eventName","fileName","eventMonitor","document","getElementById","event","CustomEvent","detail","dispatchEvent","translateDocFromFirestore","parsedDoc","refdocs","recusivelyCheckObjectValue","result","input","fieldPath","toDate","index","isInputADocReference","ref","refDocPath","id","firestore","parent","recursivelyMapStorageUrls","fireWrapper","fieldValue","_exit2","_temp3","_result","Promise","all","then","_recursivelyMapStorag","e","reject","isFileField","has","_temp4","storage","src","getDownloadURL","_catch","resolve","parseFireStoreDocument","doc","logWarn","applyRefDocs","refDocs","d","set","dataWithRefs","getAbsolutePath","rootRef","relativePath","Error","rootRefValue","withSlashes","join","split","length","slice","joinPaths","call","arguments","translateDocToFirestore","uploads","recusivelyParseObjectValue","fieldDotsPath","refPath","fieldSlashesPath","rawFile","FirebaseWrapper","inputOptions","firebaseConfig","app","options","optionsSafe","window","_firebase$apps","firebase","apps","initializeApp","ObtainFirebaseApp","dbGetCollection","absolutePath","collection","dbCreateBatch","batch","dbMakeNewId","OnUserLogout","callBack","auth","onAuthStateChanged","user","isLoggedOut","putFile","storagePath","task","put","taskResult","rej","downloadUrl","t","url","getStorageDownloadUrl","fieldSrc","serverTimestamp","FieldValue","authSetPersistence","persistenceInput","persistenceResolved","Auth","Persistence","LOCAL","NONE","SESSION","setPersistence","authSigninEmailPassword","email","password","signInWithEmailAndPassword","authSignOut","signOut","authGetUserLoggedIn","_this10","currentUser","unsubscribe","GetUserLogin","GetApp","db","TASK_PAUSED","TaskState","PAUSED","TASK_RUNNING","RUNNING","TASK_CANCELED","CANCELED","ResourceManager","flogger","_this","resources","TryGetResource","resourceName","refresh","collectionQuery","_this3","TryGetResourcePromise","RefreshResource","GetResource","resource","_this5","initPath","_this7$options","_this7$options$lazyLo","_this7","lazyLoading","enabled","query","applyQuery","newDocs","list","docs","logDocument","collectionPath","GetSingleDoc","docId","_this9","docSnap","exists","_this11","hasBeenInited","pathAbsolute","allResources","getUserIdentifier","_this13","associateUsersById","getCurrentUserId","getCurrentUserEmail","uid","collRef","FireClient","rm","checkRemoveIdField","dontAddIdFieldToDoc","transformToDb","documentData","parseDataAndUpload","r","_this2","u","parseStoragePath","docPath","useFileName","fileNameBits","File","name","fileExtension","pop","useFileNamesInStorage","saveFile","link","addCreatedByFields","_this4","AddCreatedByFields","disableMeta","currentUserIdentifier","createAtSelector","GetSelectorsCreateAt","renameMetaFields","created_at","casing","metaFieldCasing","defautCase","createBySelector","GetSelectorsCreateBy","created_by","addUpdatedByFields","_this6","AddUpdatedByFields","updateAtSelector","GetSelectorsUpdateAt","updated_at","updateBySelector","updated_by","GetSelectorsUpdateBy","_this8","_this8$fireWrapper$pu","on","snapshot","progress","bytesTransferred","totalBytes","state","_ref","relativeFilePaths","storageError","_settle","pact","s","_Pact","o","v","observer","onFulfilled","onRejected","callback","_isSettledPact","thenable","findLastQueryCursor","getQueryCursor","params","btoa","JSON","stringify","paramsToQuery","defaultParamsToQueryOptions","filtersStepQuery","filters","entries","opStr","where","sortStepQuery","sortToQuery","order","toLocaleLowerCase","orderBy","parsedOrder","pagination","_params$pagination","page","perPage","queryCursor","startAfter","limit","_temp","queryBase","currentPage","newQuery","startAt","lastQueryCursor","snapshots","docsLength","currentPageParams","_extends","_for","_getQueryCursor","_findLastQueryCursor","paginationToQuery","getFullParamsForQuery","reactAdminParams","softdeleteEnabled","deleted","array","body","check","i","_cycle","FirebaseLazyLoadingClient","client","apiGetList","tryGetResource","softDelete","resultsCount","message","total","nextPageCursor","setQueryCursor","allCursorsKey","localCursorKeys","newCursors","parse","concat","getNextPageParams","checkIfOnLastPage","isOnLastPage","_forIn","parsedData","_exit","_temp2","apiGetManyReference","filterWithTarget","_extends2","target","_temp5","_temp8","_recursivelyMapStorag2","_temp6","nextElementSnapshot","empty","clearQueryCursors","forEach","cursor","DataProvider","optionsInput","run","cb","_cb","errorMsg","code","statusTxt","regexResult","exec","status","retrieveStatusCode","errorObj","json","verifyDataProviderArgs","MakeFirestoreLogger","ResetCount","shouldReset","docCount","_options$lazyLoading","count","incrementBy","parseInt","currentCountRaw","incremented","incrementRead","logging","_options$firestoreCos","firestoreCostsLogger","_options$firestoreCos2","persistCount","newProviderApi","getList","lazyClient","filterSafe","dataPage","sortArray","_params$sort","softDeleted","filteredData","pageStart","GetList","getOne","GetOne","dataSingle","getMany","GetMany","ids","idObj","matchDocSnaps","permittedData","matches","snap","getManyReference","targetField","targetValue","targetIdFilter","GetManyReference","update","Update","docObj","docObjTransformed","updateMany","UpdateMany","idStr","returnData","create","Create","newId","merge","hasOverridenDocId","overridenId","_r$collection$doc$get","delete","Delete","previousData","DeleteSoft","deleteMany","DeleteManySoft","_step","_iterator","done","docToDelete","commit","DeleteMany","AuthClient","persistence","HandleAuthLogin","username","getUserLogin","HandleAuthLogout","HandleAuthError","errorHttp","retrieveStatusTxt","HandleAuthCheck","HandleGetPermissions","getIdTokenResult","token","claims","HandleGetIdentity","displayName","photoURL","fullName","avatar","HandleGetJWTAuthTime","authTime","HandleGetJWTExpirationTime","_this12","expirationTime","HandleGetJWTSignInProvider","_this14","signInProvider","HandleGetJWTIssuedAtTime","_this16","issuedAtTime","HandleGetJWTToken","_this18","AuthProvider","VerifyAuthProviderArgs","login","logout","checkAuth","checkError","getPermissions","getIdentity","getAuthUser","getJWTAuthTime","getJWTExpirationTime","getJWTSignInProvider","getJWTClaims","getJWTToken"],"mappings":"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"}